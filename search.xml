<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[VPS下搭建ownCloud私人云盘]]></title>
    <url>%2F2018%2F11%2F03%2FVPS%E4%B8%8B%E6%90%AD%E5%BB%BAownCloud%E7%A7%81%E4%BA%BA%E4%BA%91%E7%9B%98%2F</url>
    <content type="text"><![CDATA[基于ownCloud在VPS（CentOS 7）上搭建私有云盘前言鉴于各大网络云盘的各种限制，收费制度和用户体验并不好，利用VPS来搭建一个私有云盘就会变得越来越受欢迎，目前主流的开源软件ownCloud，NexCloud等都可以实现，下面我们就选ownCloud来搭建，vps选择的搬瓦工。 准备 一台VPS服务器，开启root权限 LAMP环境。ownCloud需要Web服务器，数据库和PHP才能正常工作。 设置LAMP（Linux，Apache，MySQL和PHP）服务器满足所有这些要求 安装ownCloud ，并配置相关参数。 设置LAMP环境“LAMP”是一组开放源代码软件，通常安装在一起以使服务器能够托管动态网站和网络应用。这个词其实是代表linux下的操作系统，Apache Web服务器的缩写。 站点数据存储在MySQL数据库（使用MariaDB），以及动态内容用PHP处理。 接下来，我们将在CentOS 7 VPS上安装一个LAMP。 CentOS将满足我们的第一个需求：一个Linux操作系统。 安装Apache 在终端输入命令安装： sudo yum install httpd 安装完成后，启动该服务 sudo systemctl start httpd.service 踩坑：如果无法启动报错，可能是没有设置防火墙对http/https的访问权限，输入下面命令开启 sudo firewall-cmd --permanent --zone=public --add-service=http sudo firewall-cmd --permanent --zone=public --add-service=httpssudo firewall-cmd --reload// 注意：如果提示 firewall 没有启动，则使用命令开启：// 注意：如果开启防火墙后，ssh 无法访问远程vps，可以在vps服务商提供的web页面中的root shell 控制台来设置上述命令。启动： systemctl start firewalld关闭： systemctl stop firewalld查看状态： systemctl status firewalld 开机禁用 ： systemctl disable firewalld开机启用 ： systemctl enable firewalld 再次使用命令来尝试开启httpd 服务。如果开启后(即没有报错信息)，下面设置开机默认启动： sudo systemctl enable httpd.service 输入http://你的服务器地址/测试是否安装成功，如果能访问就说明安装没问题，如下截图： 到这里就Apache 服务就安装完成了。 安装MySQL（MariaDB） 现在我们已经开始运行Web服务器，现在是安装MariaDB的时候了，这是一个MySQL插件替换。 启动数据库以后会提示输入数据库密码。由于我们是首次安装，直接enter即可，同时会提示你设置密码，输入你想要设置的数据库密码即可。 // 1. 安装数据库sudo yum install mariadb-server mariadb// 2. 启动数据库sudo systemctl enable mariadb.service// 3. 设置数据库，默认启动sudo systemctl enable mariadb.service 安装PHP PHP是我们的设置的组件，它将处理代码以显示动态内容。它可以运行脚本，连接到我们的MySQL数据库以获取信息，并将处理的内容传递到我们的Web服务器以显示。 注意此处CentOS 7默认PHP为5.4版本，ownCloud需要的PHP版本为5.6以上。所以此处我们安装PHP5.6版本。 执行下面命令升级php仓库 rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpmrpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm 执行安装 yum install -y php56w php56w-opcache php56w-xml php56w-mcrypt php56w-gd php56w-devel php56w-mysql php56w-intl php56w-mbstring php56w-openssl php56w-Tokenizer php56w-posix php56w-pcntl 这里要特别注意，可能会报错php56w-commen 和php5.4-commen发生文件冲突，导致安装不成功。因为centOS 7 系统默认会安装php5.4，如果直接执行安装高版本的话就会报错，通过踩坑经验最简单直接的方法就是删除掉原有的php5.4，在安装php56w或更高的版本： 删除旧版本php的方法命令： yum remove php-common 再次执行上面的安装命令，如果安装成功，执行下面命令重启httpd服务 sudo systemctl restart httpd.service 还可以通过执行命令php -v查看php的安装版本 为了测试PHP是否正确配置，可以创建一个php脚本来查看。在web根目录/var/www/html/创建一个info.php 文件，然后使用vim打开这个文件插入下面这句话保持退出： &lt;?php phpinfo(); ?&gt; 然后访问 http://你的服务器地址/info.php 如果没有问题页面会展示PHP的一些基本信息。 最后不忘删除我们的测试页面 sudo rm /var/www/html/info.php 到这里整个LAMP服务就都安装完成了。 安装ownCloudownCloud服务器软件包不存在于CentOS的默认存储库中。然而，ownCloud为发行版维护了一个专用的存储库。 首先，导入与他们释放钥匙rpm命令。 关键的授权包管理器yum信任库。 sudo rpm --import https://download.owncloud.org/download/repositories/stable/CentOS_7/repodata/repomd.xml.key 接下来，使用curl命令下载ownCloud库文件： sudo curl -L https://download.owncloud.org/download/repositories/stable/CentOS_7/ce:stable.repo -o /etc/yum.repos.d/ownCloud.repo 添加新文件后，用clean命令使yum知道所做的更改： sudo yum clean expire-cache// 如果提示类似下列命令，说明执行成功了OutputLoaded plugins: fastestmirrorCleaning repos: base ce_stable extras updates6 metadata files removed 最后，使用进行ownCloud安装yum实用程序和install命令： sudo yum install owncloud// 当提示Is this ok [y/d/N]:消息类型Y然后按ENTER键授权安装 配置数据库 mysql -u root -p// 可能会提示要输入密码，如果没有直接enter即可 为ownCloud 创建表，注意：每个MySQL的语句必须以分号;结束 CREATE DATABASE owncloud; 接下来，创建一个单独的MySQL用户帐户，与新创建的数据库进行交互。从管理和安全的角度来看，这样做不仅有利于数据安全更有利于我们日后的管理工作。与数据库的命名一样，选择您喜欢的用户名。我们选择owncloud GRANT ALL ON owncloud.* to 'owncloud'@'localhost' IDENTIFIED BY '此处填写你想要设置的密码'; 执行flush-privileges操作以确保MySQL应用权限分配 FLUSH PRIVILEGES; 数据库已经完成配置，执行命令exit退出。 配置ownCloud打开https://你的服务器地址/owncloud进入web管理页面 此时页面会提示你创建管理员账号，输入你想要的管理员账号和密码。在下方的数据库选项中选择MySQL／MariaDB，并且填入相应的账号和密码。此处填入的账号和密码即之前我们设置数据库时设置的账号和密码 点击Finish setup 完成安装。然后重新进入ownCloud web页面就可以进入到网盘。 到这里整个安装流程就都完成，可以开心的上传自己的文件啦。]]></content>
      <tags>
        <tag>ownCloud</tag>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决Hexo DTraceProviderBindings MODULE_NOT_FOUND报错]]></title>
    <url>%2F2018%2F01%2F16%2F%E8%A7%A3%E5%86%B3Hexo-DTraceProviderBindings-MODULE-NOT-FOUND%E6%8A%A5%E9%94%99%2F</url>
    <content type="text"><![CDATA[问题描述：当我们在执行hexo 命令的时候有时会出现如下报错，这是因为hexo没有安装dtrace-prodider 模块导致的错误提示。但是hexo命令任然可以正常执行。可通过下面方法来屏蔽此报错信息。 hexo报错信息 &#123; [Error: Cannot find module './build/Release/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125;&#123; [Error: Cannot find module './build/default/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125;&#123; [Error: Cannot find module './build/Debug/DTraceProviderBindings'] code: 'MODULE_NOT_FOUND' &#125; 解决方法：可以通过重新安装hexo-cli来解决此问题： 安装命令： //1. 卸载hexo-cli $ sudo npm uninstall hexo-cli -g//2. 安装hexo-cli ，注意：这里必须用管理员权限安装，否则会报错。$ sudo npm install hexo-cli -g]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F01%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new "My New Post" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment 这是一段测试代码- (void)clearAllChatRecord&#123; [WJAlertSheetView showAlertSheetViewWithTips:@"确认清空所有聊天记录？清空后将无法恢复" items:@[@"确定"] completion:^(NSInteger index,UIButton *item) &#123; if (index == 1) &#123; BOOL success = [[DBManager shareManager] deleteAllMessageRecord]; [MBProgressHUD hideHUD]; if (!success) &#123; [MBProgressHUD showLabelWithText:@"清除失败，请重试"]; &#125;else&#123; [MBProgressHUD showLabelWithText:@"清除完成"]; &#125; &#125; &#125;]; // 测试文字&#125;]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>